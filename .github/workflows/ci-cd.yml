name: CI/CD Pipeline

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  IMAGE_NAME: log-monitor-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build Docker image
        run: docker build -t $ECR_REGISTRY/$IMAGE_NAME:latest .

      - name: Push Docker image to ECR
        run: docker push $ECR_REGISTRY/$IMAGE_NAME:latest

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      # Apply monitoring stack first (Prometheus, Grafana, Alertmanager, Mailhog, etc.)
      - name: Apply monitoring stack
        run: |
          kubectl apply -f kubernetes/prometheus/
          kubectl apply -f kubernetes/alertmanager/
          kubectl apply -f kubernetes/grafana/
          kubectl apply -f kubernetes/mailhog.yaml

      # Then apply the application (log monitor, cronjob, log processor, etc.)
      - name: Apply application manifests
        run: |
          kubectl apply -f kubernetes/log-generator-cronjob.yaml
          kubectl apply -f kubernetes/log-processor.yaml
          kubectl apply -f kubernetes/

      # Finally update the app deployment with the new image
      - name: Update Deployment with new image
        run: |
          kubectl set image deployment/log-monitor-deployment \
          log-monitor=$ECR_REGISTRY/$IMAGE_NAME:latest -n monitoring
          kubectl rollout status deployment/log-monitor-deployment -n monitoring
